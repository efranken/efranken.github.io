using pets as test api

using postman to view post of API

richardfranks.postman.co


Doing a get request of the Pets API that I started from https://bzy4xhbr70.execute-api.us-east-2.amazonaws.com/test/pets/ returns
[
    {
        "id": 1,
        "type": "dog",
        "price": 249.99
    },
    {
        "id": 2,
        "type": "cat",
        "price": 124.99
    },
    {
        "id": 3,
        "type": "fish",
        "price": 0.99
    }
]

I can use lambda to make this request then put it into DynamoDB

Steps I'm gonna take

Write python in vscode outside of lambda to 
	write to dynamodb
	get data from API

then I'll put it in lambda

Simple test code in Python

import requests
import json

#define how to parse json
def jprint(obj):
    text = json.dumps(obj, sort_keys=True, indent=4)
    print(text)

response = requests.get("https://bzy4xhbr70.execute-api.us-east-2.amazonaws.com/test/pets/")

#using jprint instead of print to get then nice indented version of json
jprint(response.json())

I don't know what I'm doing really, and the AWS site says that the default directory for where keys live locally for AWS is a linux file path, since I"m using windows I'll just install AWS CLI and do an AWS COnfigure to add it that way.

Now that I've gotten the API request in python locally, I'll have to figure out how to create and write to a table from python.

Following a tutorial, I wrote this modified code to keep it inline with the pets theme of the AWS api tutorial for now.

import boto3

dynamodb = boto3.resource('dynamodb')

table = dynamodb.create_table(
    TableName='pets',
    KeySchema=[
        {
            'AttributeName': 'id',
            'KeyType': 'HASH'
        },
        {
            'AttributeName': 'type',
            'KeyType': 'RANGE'
        }
    ],
    AttributeDefinitions=[
        {
            'AttributeName': 'id',
            'AttributeType': 'S'
        },
        {
            'AttributeName': 'type',
            'AttributeType': 'S'
        },
    ],
    ProvisionedThroughput={
        'ReadCapacityUnits': 5,
        'WriteCapacityUnits': 5
    }
)

table.meta.client.get_waiter('table_exists').wait(TableName='PETS')

print(table.item_count)

After this runs it will return 0.

Ok so I've gotten a couple of the hurdles out of the way so far.  Now I need to write to a table with some sample data, then hopefully figure out how to parse JSON and use that to write.

I'm gonna add Frankie and Annabelle as pets for this one.

import boto3

dynamodb = boto3.resource('dynamodb')

table=dynamodb.Table('pets')

#do before running put_items to see the count, do again after to verify writing worked
print(table.item_count)

table.put_item(
   Item={
        'id': 'frankie',
        'type': 'cat',
        'price': 'free',
        'age': 4,
    }
)

table.put_item(
   Item={
        'id': 'annabelle',
        'type': 'dog',
        'price': 'free',
        'age': 7,
    }
)

print(table.item_count)

I thought I was gonna get crafty with my before and after table.item_count but AWS states that DynamoDB only updates this value every 6 hours.

Now I need to figure out how to parse the JSON from the API call and feed that into DynamoDB.  Then I can figure out the part of how to get the site to make an API call on load of the page, maybe with the 1x1.gif test or an html5 trigger, or who the hell knows, I'm flying by the seat of my pants here.

I guess this next one will be kind of like a web scraper.  

Table.putitem will update a line too

Got it working by iterating through the array.  The loop, at the start, specifies what items go in the array, then fills the array with parsed data from the JSON conversion of the API call.

The first issue I had was the 'id' type expected a string. This was easy because all I had to do was wrap the 'id' definition in a str() on the put_item section of the code.

The next issue was price, boto3/dynamodb handle decimals differently than python.  Reading up on it, it looks like the float is inaccurate due to Python's base 2 numbering system.  Decimal type is what needs to be used.

First error was TypeError: Float types are not supported. Use Decimal types instead.

After trying to wrap everything in a Decimal() I kept getting decimal.Inexact: [<class 'decimal.Inexact'>, <class 'decimal.Rounded'>]

I think my issue was that I was trying to convert another variable to decimal, instead of converting the number itself directly?  I can convert to int type but it just rounds to the nearest whole.  This might not be an issue for the type of data I need to collect in the next step of this, but it's still kinda ugly.

The solution is - Decimal(str(*variable*)).  Seems pretty inelegant but it works.  Now we have API call directly into DynamoDB!  The next steps will be adapting the API to what I need to get user data, and then adapting the Lambda code with the correct variables to write to DynamoDB.

import json
import requests
import boto3
from decimal import Decimal

dynamodb = boto3.resource('dynamodb')
table=dynamodb.Table('pets')

response = requests.get("https://bzy4xhbr70.execute-api.us-east-2.amazonaws.com/test/pets/")

parsed = response.json()
array = []

for item in parsed:
    array_items = {"id":None, "type":None, "price":None}
    array_items['id'] = item['id']
    array_items['type'] = item['type']
    array_items['price'] = item['price']

    array.append(array_items)

    table.put_item(
       Item={
        'id': str(array_items['id']),
        'type': array_items['type'],
        'price': Decimal(str(array_items['price']))
    })

print(array)